{
  "name": "node-webkit-builder",
  "version": "0.1.3",
  "description": "node-webkit-builder",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mllrsohn/node-webkit-builder.git"
  },
  "bin": {
    "nwbuild": "./bin/nwbuild"
  },
  "author": {
    "name": "Steffen MÃ¼ller"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mllrsohn/node-webkit-builder/issues"
  },
  "homepage": "https://github.com/mllrsohn/node-webkit-builder",
  "devDependencies": {
    "nock": "^0.32.3",
    "tape": "^2.12.3"
  },
  "dependencies": {
    "archiver": "^0.10.0",
    "bluebird": "~1.2.2",
    "decompress-zip": "0.0.8",
    "fs-extra": "^0.10.0",
    "inherits": "~2.0.1",
    "lodash": "~2.4.1",
    "ncp": "^0.6.0",
    "optimist": "^0.6.1",
    "rcedit": "0.2.0",
    "plist": "^1.0.0",
    "progress": "~1.1.7",
    "request": "~2.40.0",
    "rimraf": "^2.2.8",
    "semver": "^2.3.1",
    "simple-glob": "~0.1.0",
    "tar-fs": "^0.3.2",
    "temp": "~0.7.0",
    "update-notifier": "^0.1.8",
    "winresourcer": "^0.9.0"
  },
  "readme": "# node-webkit-builder [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\r\n\r\n[![NPM](https://nodei.co/npm/node-webkit-builder.png?downloads=true)](https://nodei.co/npm/node-webkit-builder/)\r\n\r\n> Lets you build your [node-webkit](https://github.com/rogerwang/node-webkit) apps for mac, win and linux via cli. It will download the prebuilt binaries for a newest version, unpacks it, creates a release folder, create the app.nw file for a specified directory and copies the app.nw file where it belongs.\r\n\r\n\r\n### Installation\r\n\r\n##### Local\r\n```shell\r\nnpm install node-webkit-builder --save-dev\r\n```\r\n\r\n##### Global\r\n```shell\r\nnpm install node-webkit-builder -g\r\n```\r\n\r\n##### Grunt and Gulp Plugins\r\nYes, there is also a [Grunt Plugin](https://github.com/mllrsohn/grunt-node-webkit-builder). For Gulp, just use the module :)\r\n\r\n\r\n## Usage\r\n\r\n```shell\r\nUsage: nwbuild [options] [path]\r\n\r\nOptions:\r\n  -p, --platforms      Platforms to build, comma-sperated, can be: win,osx,linux32,linux64   [default: \"osx,win\"]\r\n  -v, --version        The nw version, eg. 0.8.4                                             [default: \"latest\"]\r\n  -r, --run            Runs node-webkit for the current platform                            [default: false]  \r\n  -o, --buildDir       The build folder                                                      [default: \"./build\"]\r\n  -f, --forceDownload  Force download of node-webkit                                         [default: false]\r\n  --quiet              Disables logging                                                      [default: false]\r\n\r\n```\r\n#### Run node-webkit\r\nDuring development you can run node-webkit with `nwbuild -r path/to/your/younwapp/`\r\n\r\nOr use the module:\r\n\r\n```js\r\nvar NwBuilder = require('node-webkit-builder');\r\nvar nw = new NwBuilder({\r\n    files: './path/to/nwfiles/**/**', // use the glob format\r\n    platforms: ['win','osx']\r\n});\r\n\r\n// Log stuff you want\r\nnw.on('log',  console.log);\r\n\r\n// Build returns a promise\r\nnw.build().then(function () {\r\n   console.log('all done!');\r\n}).catch(function (error) {\r\n    console.error(error);\r\n});\r\n\r\n// And supports callbacks\r\nnw.build(function(err) {\r\n    if(err) console.log(err);\r\n})\r\n\r\n```\r\n\r\n### Options\r\n\r\n#### options.files *Required*\r\nType: `String`  \r\nDefault value: `null`  \r\n\r\nThe path to your node webkit app. It supports [simple-glob](https://github.com/jedmao/simple-glob) so you can do stuff like `['foo/*.js', '!foo/bar.js', 'foo/bar.js']`.\r\n\r\n\r\n#### options.version\r\nType: `String`\r\nDefault value: `'latest'`\r\n\r\nThe version of node-webkit you want to use. Per default it looks up the latest version. [Here is a list](https://github.com/rogerwang/node-webkit/wiki/Downloads-of-old-versions) of all available releases\r\n\r\n#### options.platforms\r\nType: `Array`  \r\nDefault value: `['win', 'osx']`\r\n\r\nThe platforms you want to build. Can be `['win', 'osx', 'linux32', 'linux64']`\r\n\r\n#### options.appName\r\nType: `String`  \r\nDefault value: `false`  \r\n\r\nThe Name of your node-webkit app. If this value is set to null, it will autodetect the `name` form your projects package.json. This will be used to generate a plist file for mac.\r\n\r\n#### options.appVersion\r\nType: `String`  \r\nDefault value: `false`  \r\n\r\nThe version of your node-webkit app. If this value is set to null, it will autodetect the `version` form your projects package.json. This will be used to generate a plist file for mac.\r\n\r\n#### options.buildDir\r\nType: `String`  \r\nDefault value: `./build`  \r\n\r\nThis is where the releases are saved.\r\n\r\n#### options.cacheDir\r\nType: `String`  \r\nDefault value: `./cache`  \r\n\r\nThis is where the cached node-webkit downloads are\r\n\r\n#### options.buildType\r\nType: `String` or `function`\r\nDefault value: `default`  \r\n\r\nHow you want to save your build.\r\n\r\n* `default` [appName]\r\n* `versioned` [appName] -v[appVersion]\r\n* `timestamped` [appName] - [timestamp];\r\n* A function with options as scope (e.g `function () {return this.appVersion;}` )\r\n\r\n#### options.forceDownload\r\nType: `Boolean`  \r\nDefault value: `false`  \r\n\r\nThis will delete everything in your `build_dir` directory, including the cached downloaded prebuilt binaries\r\n\r\n#### options.macCredits\r\nType: `String`  \r\nDefault value: `false`  \r\n\r\nMAC ONLY: The path to your credits.html file. If your don't provide your own it will use the one provided by node-webkit\r\n\r\n#### options.macIcns\r\nType: `String`  \r\nDefault value: `false`  \r\n\r\nMAC ONLY: The path to your ICNS icon file. If your don't provide your own it will use the one provided by node-webkit\r\n\r\n#### options.macZip\r\nType: `Boolean`  \r\nDefault value: `false`  \r\n\r\nMAC ONLY: Use a `app.nw` folder instead of `ZIP` file, this significantly improves the startup speed of applications on `mac`, since no decompressing is needed. Builds on other platforms will still use `ZIP` files.\r\n\r\n#### options.macPlist\r\nType: `String`  \r\nDefault value: `false`  \r\n\r\nMAC ONLY: if you supply a string to a Plist file it will use it. Otherwise it will generate something usefull from your package.json\r\n\r\n#### options.winIco\r\nType: `String`  \r\nDefault value: `null`  \r\n\r\nWINDOWS ONLY: The path to your ICO icon file. If your don't provide your own it will use the one provided by node-webkit. If you are building on MAC or LINUX you must have [Wine](http://winehq.org) installed to use this option.\r\n\r\n\r\n## To Do:\r\n- Test it on Linux and Windows\r\n\r\n## Release History\r\n- 2014-08-19    `0.1.2` adds a progress bar to downloads, fixes downloading through a proxy, fixed winIco, bug fixes\r\n- 2014-08-01    `0.1.0` use app filename for generated executables, optimized version checking, (known issue: `winIco` on windows)\r\n- 2014-07-31    `0.0.4` fixed compatibility with nodewebkit 0.10.0\r\n- 2014-04-20    Added run option, bug fixes\r\n- 2014-04-13    Preview Release\r\n## License\r\n\r\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\r\n\r\n[npm-url]: https://npmjs.org/package/node-webkit-builder\r\n[npm-image]: https://badge.fury.io/js/node-webkit-builder.png\r\n\r\n[travis-url]: http://travis-ci.org/mllrsohn/node-webkit-builder\r\n[travis-image]: https://secure.travis-ci.org/mllrsohn/node-webkit-builder.png?branch=master\r\n\r\n[depstat-url]: https://david-dm.org/mllrsohn/node-webkit-builder\r\n[depstat-image]: https://david-dm.org/mllrsohn/node-webkit-builder.png\r\n",
  "readmeFilename": "README.md",
  "_id": "node-webkit-builder@0.1.3",
  "_from": "node-webkit-builder@"
}
